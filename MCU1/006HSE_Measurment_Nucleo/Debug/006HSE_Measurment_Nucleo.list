
006HSE_Measurment_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000368  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000368  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000116  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000086  00000000  00000000  000104ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f88  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000042c  00000000  00000000  00011538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cfd  00000000  00000000  00011964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00015661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000156b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000348 	.word	0x08000348

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000348 	.word	0x08000348

08000204 <main>:
#define RCC_CR_REG_ADDR          	(RCC_BASE_ADDR + RCC_CR_REG_OFFSET )

#define GPIOA_BASE_ADDR            	0x40020000UL

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
	uint32_t *pRccCrReg =  (uint32_t*) RCC_CR_REG_ADDR;
 800020a:	4b23      	ldr	r3, [pc, #140]	; (8000298 <main+0x94>)
 800020c:	617b      	str	r3, [r7, #20]
	uint32_t *pRccCfgrReg =  (uint32_t*) RCC_CFGR_REG_ADDR;
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <main+0x98>)
 8000210:	613b      	str	r3, [r7, #16]

	//1. Enable the HSEBYP bit (RCC_CR) (bypass the oscillator with an external clock)
	*pRccCrReg |= ( 1 <<18);
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	601a      	str	r2, [r3, #0]

	//2. Enable the HSE clock using HSEON bit (RCC_CR)
	*pRccCrReg |= (1<< 16);
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	601a      	str	r2, [r3, #0]

	//3. Switch the systemclock to HSE (RCC_CFGR)
	*pRccCfgrReg |= (1 <<0 );
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0201 	orr.w	r2, r3, #1
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	601a      	str	r2, [r3, #0]
	/*****************************************DO MCO1 settings to measure it******************************************/


	//4. Do MC01 settings to measure it
	//1. Configure the RCC_CFGR MCO1 bit fields to select HSE as clock source
	*pRccCfgrReg |= (1 << 22); //clear 21 and 22 bit positions
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]

	//Configure MCO1 prescaler  //divisor as 4
	*pRccCfgrReg |= ( 1 << 25);
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= ( 1 << 26);
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	601a      	str	r2, [r3, #0]
	 * which will be covered in later sections of this course.
	 */

	//a ) Enable the peripheral clock for GPIOA peripheral

	 uint32_t *pRCCAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x9c>)
 800025c:	60fb      	str	r3, [r7, #12]
	*pRCCAhb1Enr |= ( 1 << 0); //Enable GPIOA peripheral clock
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0201 	orr.w	r2, r3, #1
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

	//b ) Configure the mode of GPIOA pin 8 as alternate function mode

	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 00);
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <main+0xa0>)
 800026c:	60bb      	str	r3, [r7, #8]
	*pGPIOAModeReg &= ~( 0x3 << 16); //clear
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= ( 0x2 << 16);  //set
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	601a      	str	r2, [r3, #0]

	//c ) Configure the alternation function register to set the mode 0 for PA8

	uint32_t *pGPIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <main+0xa4>)
 8000288:	607b      	str	r3, [r7, #4]
	*pGPIOAAltFunHighReg &= ~( 0xf << 0);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f023 020f 	bic.w	r2, r3, #15
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]

	for(;;);
 8000296:	e7fe      	b.n	8000296 <main+0x92>
 8000298:	40023800 	.word	0x40023800
 800029c:	40023808 	.word	0x40023808
 80002a0:	40023830 	.word	0x40023830
 80002a4:	40020000 	.word	0x40020000
 80002a8:	40020024 	.word	0x40020024

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff91 	bl	8000204 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	; (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	; (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr


stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002578  08002578  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002578  08002578  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002578  08002578  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000078  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004fbf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fbd  00000000  00000000  00025067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00026028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000330  00000000  00000000  000263e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004004  00000000  00000000  00026710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000414a  00000000  00000000  0002a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d76c  00000000  00000000  0002e85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0003bfca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001474  00000000  00000000  0003c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002474 	.word	0x08002474

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	08002474 	.word	0x08002474

080001e8 <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 80001ee:	f000 f90f 	bl	8000410 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80001f2:	f000 f949 	bl	8000488 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4809      	ldr	r0, [pc, #36]	; (8000220 <ds1307_init+0x38>)
 80001fa:	f001 f997 	bl	800152c <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80001fe:	2100      	movs	r1, #0
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f957 	bl	80004b4 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f970 	bl	80004ec <ds1307_read>
 800020c:	4603      	mov	r3, r0
 800020e:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	09db      	lsrs	r3, r3, #7
 8000214:	b2db      	uxtb	r3, r3

}
 8000216:	4618      	mov	r0, r3
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40005400 	.word	0x40005400

08000224 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f979 	bl	8000528 <binary_to_bcd>
 8000236:	4603      	mov	r3, r0
 8000238:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 800023a:	7bbb      	ldrb	r3, [r7, #14]
 800023c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000240:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f934 	bl	80004b4 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	785b      	ldrb	r3, [r3, #1]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f969 	bl	8000528 <binary_to_bcd>
 8000256:	4603      	mov	r3, r0
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f92a 	bl	80004b4 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f95f 	bl	8000528 <binary_to_bcd>
 800026a:	4603      	mov	r3, r0
 800026c:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	78db      	ldrb	r3, [r3, #3]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d104      	bne.n	8000280 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800027c:	73fb      	strb	r3, [r7, #15]
 800027e:	e011      	b.n	80002a4 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000286:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	78db      	ldrb	r3, [r3, #3]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d104      	bne.n	800029a <ds1307_set_current_time+0x76>
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	b2db      	uxtb	r3, r3
 8000298:	e003      	b.n	80002a2 <ds1307_set_current_time+0x7e>
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	f023 0320 	bic.w	r3, r3, #32
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	2102      	movs	r1, #2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f903 	bl	80004b4 <ds1307_write>

}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b082      	sub	sp, #8
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f930 	bl	8000528 <binary_to_bcd>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2104      	movs	r1, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8f1 	bl	80004b4 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f926 	bl	8000528 <binary_to_bcd>
 80002dc:	4603      	mov	r3, r0
 80002de:	2105      	movs	r1, #5
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f8e7 	bl	80004b4 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	789b      	ldrb	r3, [r3, #2]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f91c 	bl	8000528 <binary_to_bcd>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2106      	movs	r1, #6
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f8dd 	bl	80004b4 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	78db      	ldrb	r3, [r3, #3]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f912 	bl	8000528 <binary_to_bcd>
 8000304:	4603      	mov	r3, r0
 8000306:	2103      	movs	r1, #3
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f8d3 	bl	80004b4 <ds1307_write>

}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f8e4 	bl	80004ec <ds1307_read>
 8000324:	4603      	mov	r3, r0
 8000326:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800032e:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f924 	bl	8000580 <bcd_to_binary>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000340:	2001      	movs	r0, #1
 8000342:	f000 f8d3 	bl	80004ec <ds1307_read>
 8000346:	4603      	mov	r3, r0
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f919 	bl	8000580 <bcd_to_binary>
 800034e:	4603      	mov	r3, r0
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000356:	2002      	movs	r0, #2
 8000358:	f000 f8c8 	bl	80004ec <ds1307_read>
 800035c:	4603      	mov	r3, r0
 800035e:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000366:	2b00      	cmp	r3, #0
 8000368:	d00f      	beq.n	800038a <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	f003 0320 	and.w	r3, r3, #32
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf14      	ite	ne
 8000374:	2301      	movne	r3, #1
 8000376:	2300      	moveq	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000386:	73fb      	strb	r3, [r7, #15]
 8000388:	e002      	b.n	8000390 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2202      	movs	r2, #2
 800038e:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f8f4 	bl	8000580 <bcd_to_binary>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	709a      	strb	r2, [r3, #2]
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 f89b 	bl	80004ec <ds1307_read>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f8e1 	bl	8000580 <bcd_to_binary>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80003c6:	2004      	movs	r0, #4
 80003c8:	f000 f890 	bl	80004ec <ds1307_read>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f8d6 	bl	8000580 <bcd_to_binary>
 80003d4:	4603      	mov	r3, r0
 80003d6:	461a      	mov	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80003dc:	2005      	movs	r0, #5
 80003de:	f000 f885 	bl	80004ec <ds1307_read>
 80003e2:	4603      	mov	r3, r0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f8cb 	bl	8000580 <bcd_to_binary>
 80003ea:	4603      	mov	r3, r0
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80003f2:	2006      	movs	r0, #6
 80003f4:	f000 f87a 	bl	80004ec <ds1307_read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f8c0 	bl	8000580 <bcd_to_binary>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	709a      	strb	r2, [r3, #2]

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	220c      	movs	r2, #12
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fb5a 	bl	8001ad8 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000424:	463b      	mov	r3, r7
 8000426:	220c      	movs	r2, #12
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fb54 	bl	8001ad8 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <ds1307_i2c_pin_config+0x74>)
 8000432:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000434:	2304      	movs	r3, #4
 8000436:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000438:	2302      	movs	r3, #2
 800043a:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 800043c:	2307      	movs	r3, #7
 800043e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000440:	2301      	movs	r3, #1
 8000442:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000444:	2301      	movs	r3, #1
 8000446:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000448:	2302      	movs	r3, #2
 800044a:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fe21 	bl	8001098 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <ds1307_i2c_pin_config+0x74>)
 8000458:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800045a:	2304      	movs	r3, #4
 800045c:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800045e:	2302      	movs	r3, #2
 8000460:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000462:	2306      	movs	r3, #6
 8000464:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000466:	2301      	movs	r3, #1
 8000468:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800046a:	2301      	movs	r3, #1
 800046c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800046e:	2302      	movs	r3, #2
 8000470:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000472:	463b      	mov	r3, r7
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fe0f 	bl	8001098 <GPIO_Init>

}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40020400 	.word	0x40020400

08000488 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <ds1307_i2c_config+0x20>)
 800048e:	4a07      	ldr	r2, [pc, #28]	; (80004ac <ds1307_i2c_config+0x24>)
 8000490:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <ds1307_i2c_config+0x20>)
 8000494:	2201      	movs	r2, #1
 8000496:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <ds1307_i2c_config+0x20>)
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <ds1307_i2c_config+0x28>)
 800049c:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 800049e:	4802      	ldr	r0, [pc, #8]	; (80004a8 <ds1307_i2c_config+0x20>)
 80004a0:	f001 f8b8 	bl	8001614 <I2C_Init>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000b8 	.word	0x200000b8
 80004ac:	40005400 	.word	0x40005400
 80004b0:	000186a0 	.word	0x000186a0

080004b4 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	4613      	mov	r3, r2
 80004c2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80004cc:	f107 010c 	add.w	r1, r7, #12
 80004d0:	2300      	movs	r3, #0
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	2368      	movs	r3, #104	; 0x68
 80004d6:	2202      	movs	r2, #2
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <ds1307_write+0x34>)
 80004da:	f001 f961 	bl	80017a0 <I2C_MasterSendData>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200000b8 	.word	0x200000b8

080004ec <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	2300      	movs	r3, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2368      	movs	r3, #104	; 0x68
 80004fe:	2201      	movs	r2, #1
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <ds1307_read+0x38>)
 8000502:	f001 f94d 	bl	80017a0 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000506:	f107 010f 	add.w	r1, r7, #15
 800050a:	2300      	movs	r3, #0
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2368      	movs	r3, #104	; 0x68
 8000510:	2201      	movs	r2, #1
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <ds1307_read+0x38>)
 8000514:	f001 f9a7 	bl	8001866 <I2C_MasterReceiveData>

    return data;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000b8 	.word	0x200000b8

08000528 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d918      	bls.n	800056e <binary_to_bcd+0x46>
	{
		m = value /10;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <binary_to_bcd+0x54>)
 8000540:	fba2 2303 	umull	r2, r3, r2, r3
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <binary_to_bcd+0x54>)
 800054c:	fba3 1302 	umull	r1, r3, r3, r2
 8000550:	08d9      	lsrs	r1, r3, #3
 8000552:	460b      	mov	r3, r1
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	b25a      	sxtb	r2, r3
 8000564:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000568:	4313      	orrs	r3, r2
 800056a:	b25b      	sxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	cccccccd 	.word	0xcccccccd

08000580 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	091b      	lsrs	r3, r3, #4
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	4413      	add	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f003 030f 	and.w	r3, r3, #15
 80005a0:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <lcd_send_command+0x40>)
 80005c8:	f000 ff08 	bl	80013dc <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <lcd_send_command+0x40>)
 80005d2:	f000 ff03 	bl	80013dc <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f8cd 	bl	800077c <write_4_bits>
	write_4_bits(cmd & 0x0F);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f8c6 	bl	800077c <write_4_bits>

}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020c00 	.word	0x40020c00

080005fc <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2100      	movs	r1, #0
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <lcd_print_char+0x40>)
 800060c:	f000 fee6 	bl	80013dc <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <lcd_print_char+0x40>)
 8000616:	f000 fee1 	bl	80013dc <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f8ab 	bl	800077c <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f8a4 	bl	800077c <write_4_bits>

}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020c00 	.word	0x40020c00

08000640 <lcd_print_string>:


void lcd_print_string(char *message)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ffd3 	bl	80005fc <lcd_print_char>
      }
      while (*message != '\0');
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f4      	bne.n	8000648 <lcd_print_string+0x8>

}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_init>:


void lcd_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <lcd_init+0x110>)
 8000670:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000672:	2301      	movs	r3, #1
 8000674:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000676:	2300      	movs	r3, #0
 8000678:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800067a:	2300      	movs	r3, #0
 800067c:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000682:	2302      	movs	r3, #2
 8000684:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd05 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800068e:	2301      	movs	r3, #1
 8000690:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fcff 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800069a:	2302      	movs	r3, #2
 800069c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fcf9 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 80006a6:	2303      	movs	r3, #3
 80006a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcf3 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 80006b2:	2304      	movs	r3, #4
 80006b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fced 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 80006be:	2305      	movs	r3, #5
 80006c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fce7 	bl	8001098 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80006ca:	2306      	movs	r3, #6
 80006cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fce1 	bl	8001098 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	4827      	ldr	r0, [pc, #156]	; (8000778 <lcd_init+0x110>)
 80006dc:	f000 fe7e 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4824      	ldr	r0, [pc, #144]	; (8000778 <lcd_init+0x110>)
 80006e6:	f000 fe79 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <lcd_init+0x110>)
 80006f0:	f000 fe74 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2103      	movs	r1, #3
 80006f8:	481f      	ldr	r0, [pc, #124]	; (8000778 <lcd_init+0x110>)
 80006fa:	f000 fe6f 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2104      	movs	r1, #4
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <lcd_init+0x110>)
 8000704:	f000 fe6a 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2105      	movs	r1, #5
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <lcd_init+0x110>)
 800070e:	f000 fe65 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2106      	movs	r1, #6
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <lcd_init+0x110>)
 8000718:	f000 fe60 	bl	80013dc <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 800071c:	2028      	movs	r0, #40	; 0x28
 800071e:	f000 f8b7 	bl	8000890 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <lcd_init+0x110>)
 8000728:	f000 fe58 	bl	80013dc <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2101      	movs	r1, #1
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <lcd_init+0x110>)
 8000732:	f000 fe53 	bl	80013dc <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000736:	2003      	movs	r0, #3
 8000738:	f000 f820 	bl	800077c <write_4_bits>

	mdelay(5);
 800073c:	2005      	movs	r0, #5
 800073e:	f000 f8a7 	bl	8000890 <mdelay>

	write_4_bits(0x3);
 8000742:	2003      	movs	r0, #3
 8000744:	f000 f81a 	bl	800077c <write_4_bits>

	udelay(150);
 8000748:	2096      	movs	r0, #150	; 0x96
 800074a:	f000 f8ba 	bl	80008c2 <udelay>

	write_4_bits(0x3);
 800074e:	2003      	movs	r0, #3
 8000750:	f000 f814 	bl	800077c <write_4_bits>
	write_4_bits(0x2);
 8000754:	2002      	movs	r0, #2
 8000756:	f000 f811 	bl	800077c <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f7ff ff2c 	bl	80005b8 <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000760:	200e      	movs	r0, #14
 8000762:	f7ff ff29 	bl	80005b8 <lcd_send_command>

	lcd_display_clear();
 8000766:	f000 f841 	bl	80007ec <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 800076a:	2006      	movs	r0, #6
 800076c:	f7ff ff24 	bl	80005b8 <lcd_send_command>



}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020c00 	.word	0x40020c00

0800077c <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	2103      	movs	r1, #3
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <write_4_bits+0x6c>)
 8000794:	f000 fe22 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	085b      	lsrs	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	2104      	movs	r1, #4
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <write_4_bits+0x6c>)
 80007aa:	f000 fe17 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	089b      	lsrs	r3, r3, #2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	2105      	movs	r1, #5
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <write_4_bits+0x6c>)
 80007c0:	f000 fe0c 	bl	80013dc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	2106      	movs	r1, #6
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <write_4_bits+0x6c>)
 80007d6:	f000 fe01 	bl	80013dc <GPIO_WriteToOutputPin>

	lcd_enable();
 80007da:	f000 f843 	bl	8000864 <lcd_enable>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020c00 	.word	0x40020c00

080007ec <lcd_display_clear>:

void lcd_display_clear(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fee1 	bl	80005b8 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 f84a 	bl	8000890 <mdelay>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff fed7 	bl	80005b8 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 800080a:	2002      	movs	r0, #2
 800080c:	f000 f840 	bl	8000890 <mdelay>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
  column--;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	3b01      	subs	r3, #1
 8000828:	71bb      	strb	r3, [r7, #6]
  switch (row)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d002      	beq.n	8000836 <lcd_set_cursor+0x22>
 8000830:	2b02      	cmp	r3, #2
 8000832:	d009      	beq.n	8000848 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000834:	e011      	b.n	800085a <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	71bb      	strb	r3, [r7, #6]
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff feb9 	bl	80005b8 <lcd_send_command>
      break;
 8000846:	e008      	b.n	800085a <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800084e:	71bb      	strb	r3, [r7, #6]
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feb0 	bl	80005b8 <lcd_send_command>
      break;
 8000858:	bf00      	nop
  }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <lcd_enable>:



static void lcd_enable(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2102      	movs	r1, #2
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <lcd_enable+0x28>)
 800086e:	f000 fdb5 	bl	80013dc <GPIO_WriteToOutputPin>
	udelay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f000 f825 	bl	80008c2 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <lcd_enable+0x28>)
 800087e:	f000 fdad 	bl	80013dc <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 f81d 	bl	80008c2 <udelay>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40020c00 	.word	0x40020c00

08000890 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e002      	b.n	80008a4 <mdelay+0x14>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008aa:	fb02 f303 	mul.w	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3f4      	bcc.n	800089e <mdelay+0xe>
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <udelay>:

static void udelay(uint32_t cnt)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b085      	sub	sp, #20
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e002      	b.n	80008d6 <udelay+0x14>
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3f8      	bcc.n	80008d0 <udelay+0xe>
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <init_systick_timer+0x60>)
 80008f6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <init_systick_timer+0x64>)
 80008fa:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <init_systick_timer+0x68>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	3b01      	subs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	431a      	orrs	r2, r3
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 0202 	orr.w	r2, r3, #2
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f043 0204 	orr.w	r2, r3, #4
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f043 0201 	orr.w	r2, r3, #1
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	601a      	str	r2, [r3, #0]

}
 800093e:	bf00      	nop
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e014 	.word	0xe000e014
 8000950:	e000e010 	.word	0xe000e010
 8000954:	00f42400 	.word	0x00f42400

08000958 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8000958:	b4b0      	push	{r4, r5, r7}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <get_day_of_week+0x38>)
 8000964:	f107 040c 	add.w	r4, r7, #12
 8000968:	461d      	mov	r5, r3
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000972:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	3b01      	subs	r3, #1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000980:	4413      	add	r3, r2
 8000982:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000986:	4618      	mov	r0, r3
 8000988:	372c      	adds	r7, #44	; 0x2c
 800098a:	46bd      	mov	sp, r7
 800098c:	bcb0      	pop	{r4, r5, r7}
 800098e:	4770      	bx	lr
 8000990:	080024d0 	.word	0x080024d0

08000994 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	d809      	bhi.n	80009ba <number_to_string+0x26>
		buf[0] = '0';
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2230      	movs	r2, #48	; 0x30
 80009aa:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	3230      	adds	r2, #48	; 0x30
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80009b8:	e01f      	b.n	80009fa <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b09      	cmp	r3, #9
 80009be:	d91c      	bls.n	80009fa <number_to_string+0x66>
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b62      	cmp	r3, #98	; 0x62
 80009c4:	d819      	bhi.n	80009fa <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <number_to_string+0x74>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3330      	adds	r3, #48	; 0x30
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <number_to_string+0x74>)
 80009de:	fba3 1302 	umull	r1, r3, r3, r2
 80009e2:	08d9      	lsrs	r1, r3, #3
 80009e4:	460b      	mov	r3, r1
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	440b      	add	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	3230      	adds	r2, #48	; 0x30
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	cccccccd 	.word	0xcccccccd

08000a0c <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <time_to_string+0x48>)
 8000a16:	223a      	movs	r2, #58	; 0x3a
 8000a18:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <time_to_string+0x48>)
 8000a1c:	223a      	movs	r2, #58	; 0x3a
 8000a1e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	490b      	ldr	r1, [pc, #44]	; (8000a54 <time_to_string+0x48>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffb4 	bl	8000994 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	785b      	ldrb	r3, [r3, #1]
 8000a30:	4909      	ldr	r1, [pc, #36]	; (8000a58 <time_to_string+0x4c>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffae 	bl	8000994 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <time_to_string+0x50>)
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffa8 	bl	8000994 <number_to_string>

	buf[8] = '\0';
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <time_to_string+0x48>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a4a:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <time_to_string+0x48>)

}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000094 	.word	0x20000094
 8000a58:	20000097 	.word	0x20000097
 8000a5c:	2000009a 	.word	0x2000009a

08000a60 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <date_to_string+0x48>)
 8000a6a:	222f      	movs	r2, #47	; 0x2f
 8000a6c:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <date_to_string+0x48>)
 8000a70:	222f      	movs	r2, #47	; 0x2f
 8000a72:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	490b      	ldr	r1, [pc, #44]	; (8000aa8 <date_to_string+0x48>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff8a 	bl	8000994 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	4909      	ldr	r1, [pc, #36]	; (8000aac <date_to_string+0x4c>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff84 	bl	8000994 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <date_to_string+0x50>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff7e 	bl	8000994 <number_to_string>

	buf[8]= '\0';
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <date_to_string+0x48>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a9e:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <date_to_string+0x48>)

}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000a0 	.word	0x200000a0
 8000aac:	200000a3 	.word	0x200000a3
 8000ab0:	200000a6 	.word	0x200000a6

08000ab4 <mdelay>:

static void mdelay(uint32_t cnt)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e002      	b.n	8000ac8 <mdelay+0x14>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f4      	bcc.n	8000ac2 <mdelay+0xe>
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <main>:

int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 8000aee:	f7ff fdbb 	bl	8000668 <lcd_init>

	lcd_print_string("RTC Test...");
 8000af2:	4833      	ldr	r0, [pc, #204]	; (8000bc0 <main+0xd8>)
 8000af4:	f7ff fda4 	bl	8000640 <lcd_print_string>


	mdelay(2000);
 8000af8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000afc:	f7ff ffda 	bl	8000ab4 <mdelay>

	lcd_display_clear();
 8000b00:	f7ff fe74 	bl	80007ec <lcd_display_clear>
	lcd_display_return_home();
 8000b04:	f7ff fe7c 	bl	8000800 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8000b08:	f7ff fb6e 	bl	80001e8 <ds1307_init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <main+0x32>
		printf("RTC init has failed\n");
 8000b12:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <main+0xdc>)
 8000b14:	f001 f856 	bl	8001bc4 <puts>
		while(1);
 8000b18:	e7fe      	b.n	8000b18 <main+0x30>
	}

	init_systick_timer(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fee6 	bl	80008ec <init_systick_timer>

	current_date.day = FRIDAY;
 8000b20:	2306      	movs	r3, #6
 8000b22:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000b24:	230f      	movs	r3, #15
 8000b26:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000b2c:	2315      	movs	r3, #21
 8000b2e:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000b30:	230b      	movs	r3, #11
 8000b32:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000b34:	233b      	movs	r3, #59	; 0x3b
 8000b36:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000b38:	231e      	movs	r3, #30
 8000b3a:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fbb7 	bl	80002b6 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb69 	bl	8000224 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fbdd 	bl	8000316 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fc22 	bl	80003a8 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d013      	beq.n	8000b92 <main+0xaa>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <main+0x8c>
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <main+0xe0>)
 8000b72:	e000      	b.n	8000b76 <main+0x8e>
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <main+0xe4>)
 8000b76:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff45 	bl	8000a0c <time_to_string>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fd5b 	bl	8000640 <lcd_print_string>
		lcd_print_string(am_pm);
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fd58 	bl	8000640 <lcd_print_string>
 8000b90:	e008      	b.n	8000ba4 <main+0xbc>
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_print_string(time_to_string(&current_time));
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff38 	bl	8000a0c <time_to_string>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd4e 	bl	8000640 <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff fe34 	bl	8000814 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff56 	bl	8000a60 <date_to_string>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fd42 	bl	8000640 <lcd_print_string>
#endif


	while(1);
 8000bbc:	e7fe      	b.n	8000bbc <main+0xd4>
 8000bbe:	bf00      	nop
 8000bc0:	080024ec 	.word	0x080024ec
 8000bc4:	080024f8 	.word	0x080024f8
 8000bc8:	0800250c 	.word	0x0800250c
 8000bcc:	08002510 	.word	0x08002510

08000bd0 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb9b 	bl	8000316 <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000be0:	7afb      	ldrb	r3, [r7, #11]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d017      	beq.n	8000c16 <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SysTick_Handler+0x20>
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SysTick_Handler+0xa4>)
 8000bee:	e000      	b.n	8000bf2 <SysTick_Handler+0x22>
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <SysTick_Handler+0xa8>)
 8000bf2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fe0c 	bl	8000814 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff03 	bl	8000a0c <time_to_string>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd19 	bl	8000640 <lcd_print_string>
		lcd_print_string(am_pm);
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff fd16 	bl	8000640 <lcd_print_string>
 8000c14:	e00c      	b.n	8000c30 <SysTick_Handler+0x60>

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fdfb 	bl	8000814 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fef2 	bl	8000a0c <time_to_string>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fd08 	bl	8000640 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fbb8 	bl	80003a8 <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fdea 	bl	8000814 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff0c 	bl	8000a60 <date_to_string>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fcf8 	bl	8000640 <lcd_print_string>
	lcd_print_char('<');
 8000c50:	203c      	movs	r0, #60	; 0x3c
 8000c52:	f7ff fcd3 	bl	80005fc <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe7d 	bl	8000958 <get_day_of_week>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fced 	bl	8000640 <lcd_print_string>
	lcd_print_char('>');
 8000c66:	203e      	movs	r0, #62	; 0x3e
 8000c68:	f7ff fcc8 	bl	80005fc <lcd_print_char>
#endif


}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	0800250c 	.word	0x0800250c
 8000c78:	08002510 	.word	0x08002510

08000c7c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <ITM_SendChar+0x48>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <ITM_SendChar+0x48>)
 8000c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c90:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <ITM_SendChar+0x4c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <ITM_SendChar+0x4c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c9e:	bf00      	nop
 8000ca0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f8      	beq.n	8000ca0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000cae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	6013      	str	r3, [r2, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000edfc 	.word	0xe000edfc
 8000cc8:	e0000e00 	.word	0xe0000e00

08000ccc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
	}

return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ffab 	bl	8000c7c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
	}
	return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f000 fe54 	bl	8001a84 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200000ac 	.word	0x200000ac
 8000e10:	200000f0 	.word	0x200000f0

08000e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e42:	f000 fe25 	bl	8001a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e46:	f7ff fe4f 	bl	8000ae8 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   r0, =_estack
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e58:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 8000e5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e60:	200000f0 	.word	0x200000f0

08000e64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <GPIO_PeriClockControl>:
 *
 * @Note					- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d178      	bne.n	8000f6c <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a7a      	ldr	r2, [pc, #488]	; (8001068 <GPIO_PeriClockControl+0x200>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d106      	bne.n	8000e90 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e82:	4b7a      	ldr	r3, [pc, #488]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a79      	ldr	r2, [pc, #484]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOK_PCLK_DI();
		}

	}

}
 8000e8e:	e0e5      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a77      	ldr	r2, [pc, #476]	; (8001070 <GPIO_PeriClockControl+0x208>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d106      	bne.n	8000ea6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e98:	4b74      	ldr	r3, [pc, #464]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a73      	ldr	r2, [pc, #460]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea4:	e0da      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a72      	ldr	r2, [pc, #456]	; (8001074 <GPIO_PeriClockControl+0x20c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d106      	bne.n	8000ebc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6e      	ldr	r2, [pc, #440]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eba:	e0cf      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	; (8001078 <GPIO_PeriClockControl+0x210>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d106      	bne.n	8000ed2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ec4:	4b69      	ldr	r3, [pc, #420]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed0:	e0c4      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a69      	ldr	r2, [pc, #420]	; (800107c <GPIO_PeriClockControl+0x214>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d106      	bne.n	8000ee8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000eda:	4b64      	ldr	r3, [pc, #400]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a63      	ldr	r2, [pc, #396]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee6:	e0b9      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <GPIO_PeriClockControl+0x218>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ef0:	4b5e      	ldr	r3, [pc, #376]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a5d      	ldr	r2, [pc, #372]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000efc:	e0ae      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a60      	ldr	r2, [pc, #384]	; (8001084 <GPIO_PeriClockControl+0x21c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d106      	bne.n	8000f14 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f06:	4b59      	ldr	r3, [pc, #356]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a58      	ldr	r2, [pc, #352]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f12:	e0a3      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <GPIO_PeriClockControl+0x220>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d106      	bne.n	8000f2a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f1c:	4b53      	ldr	r3, [pc, #332]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f28:	e098      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a57      	ldr	r2, [pc, #348]	; (800108c <GPIO_PeriClockControl+0x224>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 8000f32:	4b4e      	ldr	r3, [pc, #312]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a4d      	ldr	r2, [pc, #308]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f3e:	e08d      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a53      	ldr	r2, [pc, #332]	; (8001090 <GPIO_PeriClockControl+0x228>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000f48:	4b48      	ldr	r3, [pc, #288]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a47      	ldr	r2, [pc, #284]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f54:	e082      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <GPIO_PeriClockControl+0x22c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d17e      	bne.n	800105c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a42      	ldr	r2, [pc, #264]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f6a:	e077      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a3e      	ldr	r2, [pc, #248]	; (8001068 <GPIO_PeriClockControl+0x200>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a3c      	ldr	r2, [pc, #240]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f80:	e06c      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a3a      	ldr	r2, [pc, #232]	; (8001070 <GPIO_PeriClockControl+0x208>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d106      	bne.n	8000f98 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a37      	ldr	r2, [pc, #220]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000f90:	f023 0302 	bic.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f96:	e061      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a36      	ldr	r2, [pc, #216]	; (8001074 <GPIO_PeriClockControl+0x20c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d106      	bne.n	8000fae <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a31      	ldr	r2, [pc, #196]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fa6:	f023 0304 	bic.w	r3, r3, #4
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fac:	e056      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a31      	ldr	r2, [pc, #196]	; (8001078 <GPIO_PeriClockControl+0x210>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a2c      	ldr	r2, [pc, #176]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fbc:	f023 0308 	bic.w	r3, r3, #8
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc2:	e04b      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	; (800107c <GPIO_PeriClockControl+0x214>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d106      	bne.n	8000fda <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fd2:	f023 0310 	bic.w	r3, r3, #16
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd8:	e040      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <GPIO_PeriClockControl+0x218>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d106      	bne.n	8000ff0 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000fe8:	f023 0320 	bic.w	r3, r3, #32
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fee:	e035      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <GPIO_PeriClockControl+0x21c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d106      	bne.n	8001006 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <GPIO_PeriClockControl+0x204>)
 8000ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001004:	e02a      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <GPIO_PeriClockControl+0x220>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d106      	bne.n	800101c <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101a:	e01f      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <GPIO_PeriClockControl+0x224>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <GPIO_PeriClockControl+0x204>)
 800102a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001030:	e014      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <GPIO_PeriClockControl+0x228>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d106      	bne.n	8001048 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <GPIO_PeriClockControl+0x204>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001046:	e009      	b.n	800105c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <GPIO_PeriClockControl+0x22c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d105      	bne.n	800105c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <GPIO_PeriClockControl+0x204>)
 8001056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40020000 	.word	0x40020000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40021c00 	.word	0x40021c00
 800108c:	40022000 	.word	0x40022000
 8001090:	40022400 	.word	0x40022400
 8001094:	40022800 	.word	0x40022800

08001098 <GPIO_Init>:
 *
 * @Note					- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

	//enable peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fede 	bl	8000e68 <GPIO_PeriClockControl>

	uint32_t temp=0;		//temp register
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
	//1. Configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	795b      	ldrb	r3, [r3, #5]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d820      	bhi.n	80010fa <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2103      	movs	r1, #3
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e0cb      	b.n	8001292 <GPIO_Init+0x1fa>


	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d117      	bne.n	8001132 <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR

			EXTI->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <GPIO_Init+0x198>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	7912      	ldrb	r2, [r2, #4]
 800110a:	4611      	mov	r1, r2
 800110c:	2201      	movs	r2, #1
 800110e:	408a      	lsls	r2, r1
 8001110:	4611      	mov	r1, r2
 8001112:	4a47      	ldr	r2, [pc, #284]	; (8001230 <GPIO_Init+0x198>)
 8001114:	430b      	orrs	r3, r1
 8001116:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <GPIO_Init+0x198>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	7912      	ldrb	r2, [r2, #4]
 8001120:	4611      	mov	r1, r2
 8001122:	2201      	movs	r2, #1
 8001124:	408a      	lsls	r2, r1
 8001126:	43d2      	mvns	r2, r2
 8001128:	4611      	mov	r1, r2
 800112a:	4a41      	ldr	r2, [pc, #260]	; (8001230 <GPIO_Init+0x198>)
 800112c:	400b      	ands	r3, r1
 800112e:	6093      	str	r3, [r2, #8]
 8001130:	e035      	b.n	800119e <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	795b      	ldrb	r3, [r3, #5]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d117      	bne.n	800116a <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <GPIO_Init+0x198>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	7912      	ldrb	r2, [r2, #4]
 8001142:	4611      	mov	r1, r2
 8001144:	2201      	movs	r2, #1
 8001146:	408a      	lsls	r2, r1
 8001148:	4611      	mov	r1, r2
 800114a:	4a39      	ldr	r2, [pc, #228]	; (8001230 <GPIO_Init+0x198>)
 800114c:	430b      	orrs	r3, r1
 800114e:	6093      	str	r3, [r2, #8]
			//clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <GPIO_Init+0x198>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	7912      	ldrb	r2, [r2, #4]
 8001158:	4611      	mov	r1, r2
 800115a:	2201      	movs	r2, #1
 800115c:	408a      	lsls	r2, r1
 800115e:	43d2      	mvns	r2, r2
 8001160:	4611      	mov	r1, r2
 8001162:	4a33      	ldr	r2, [pc, #204]	; (8001230 <GPIO_Init+0x198>)
 8001164:	400b      	ands	r3, r1
 8001166:	60d3      	str	r3, [r2, #12]
 8001168:	e019      	b.n	800119e <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	795b      	ldrb	r3, [r3, #5]
 800116e:	2b06      	cmp	r3, #6
 8001170:	d115      	bne.n	800119e <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <GPIO_Init+0x198>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	7912      	ldrb	r2, [r2, #4]
 800117a:	4611      	mov	r1, r2
 800117c:	2201      	movs	r2, #1
 800117e:	408a      	lsls	r2, r1
 8001180:	4611      	mov	r1, r2
 8001182:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <GPIO_Init+0x198>)
 8001184:	430b      	orrs	r3, r1
 8001186:	6093      	str	r3, [r2, #8]
			//clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <GPIO_Init+0x198>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	7912      	ldrb	r2, [r2, #4]
 8001190:	4611      	mov	r1, r2
 8001192:	2201      	movs	r2, #1
 8001194:	408a      	lsls	r2, r1
 8001196:	4611      	mov	r1, r2
 8001198:	4a25      	ldr	r2, [pc, #148]	; (8001230 <GPIO_Init+0x198>)
 800119a:	430b      	orrs	r3, r1
 800119c:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE( pGPIOHandle->pGPIOx);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <GPIO_Init+0x19c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d04e      	beq.n	8001258 <GPIO_Init+0x1c0>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <GPIO_Init+0x1a0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d032      	beq.n	800122a <GPIO_Init+0x192>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <GPIO_Init+0x1a4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02b      	beq.n	8001226 <GPIO_Init+0x18e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <GPIO_Init+0x1a8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d024      	beq.n	8001222 <GPIO_Init+0x18a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <GPIO_Init+0x1ac>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01d      	beq.n	800121e <GPIO_Init+0x186>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a18      	ldr	r2, [pc, #96]	; (8001248 <GPIO_Init+0x1b0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d016      	beq.n	800121a <GPIO_Init+0x182>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <GPIO_Init+0x1b4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00f      	beq.n	8001216 <GPIO_Init+0x17e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <GPIO_Init+0x1b8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d008      	beq.n	8001212 <GPIO_Init+0x17a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <GPIO_Init+0x1bc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <GPIO_Init+0x176>
 800120a:	2308      	movs	r3, #8
 800120c:	e025      	b.n	800125a <GPIO_Init+0x1c2>
 800120e:	2300      	movs	r3, #0
 8001210:	e023      	b.n	800125a <GPIO_Init+0x1c2>
 8001212:	2307      	movs	r3, #7
 8001214:	e021      	b.n	800125a <GPIO_Init+0x1c2>
 8001216:	2306      	movs	r3, #6
 8001218:	e01f      	b.n	800125a <GPIO_Init+0x1c2>
 800121a:	2305      	movs	r3, #5
 800121c:	e01d      	b.n	800125a <GPIO_Init+0x1c2>
 800121e:	2304      	movs	r3, #4
 8001220:	e01b      	b.n	800125a <GPIO_Init+0x1c2>
 8001222:	2303      	movs	r3, #3
 8001224:	e019      	b.n	800125a <GPIO_Init+0x1c2>
 8001226:	2302      	movs	r3, #2
 8001228:	e017      	b.n	800125a <GPIO_Init+0x1c2>
 800122a:	2301      	movs	r3, #1
 800122c:	e015      	b.n	800125a <GPIO_Init+0x1c2>
 800122e:	bf00      	nop
 8001230:	40013c00 	.word	0x40013c00
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40021400 	.word	0x40021400
 800124c:	40021800 	.word	0x40021800
 8001250:	40021c00 	.word	0x40021c00
 8001254:	40022000 	.word	0x40022000
 8001258:	2300      	movs	r3, #0
 800125a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800125c:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <GPIO_Init+0x338>)
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	4a5b      	ldr	r2, [pc, #364]	; (80013d0 <GPIO_Init+0x338>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001266:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001268:	7c7a      	ldrb	r2, [r7, #17]
 800126a:	7cbb      	ldrb	r3, [r7, #18]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f103 	lsl.w	r1, r2, r3
 8001272:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <GPIO_Init+0x33c>)
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	3302      	adds	r3, #2
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <GPIO_Init+0x340>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	7912      	ldrb	r2, [r2, #4]
 8001284:	4611      	mov	r1, r2
 8001286:	2201      	movs	r2, #1
 8001288:	408a      	lsls	r2, r1
 800128a:	4611      	mov	r1, r2
 800128c:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <GPIO_Init+0x340>)
 800128e:	430b      	orrs	r3, r1
 8001290:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   //clearing
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	4619      	mov	r1, r3
 80012b4:	2303      	movs	r3, #3
 80012b6:	408b      	lsls	r3, r1
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	400a      	ands	r2, r1
 80012c2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]

	temp=0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	79db      	ldrb	r3, [r3, #7]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   //clearing
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2303      	movs	r3, #3
 80012f8:	408b      	lsls	r3, r1
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	430a      	orrs	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

	temp=0;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7a1b      	ldrb	r3, [r3, #8]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   //clearing
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	791b      	ldrb	r3, [r3, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	2301      	movs	r3, #1
 8001338:	408b      	lsls	r3, r1
 800133a:	43db      	mvns	r3, r3
 800133c:	4619      	mov	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]

	temp=0;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d131      	bne.n	80013c6 <GPIO_Init+0x32e>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	791b      	ldrb	r3, [r3, #4]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2) );
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7c3a      	ldrb	r2, [r7, #16]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7c3a      	ldrb	r2, [r7, #16]
 8001394:	4001      	ands	r1, r0
 8001396:	3208      	adds	r2, #8
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2) );
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	7c3a      	ldrb	r2, [r7, #16]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7a5b      	ldrb	r3, [r3, #9]
 80013ac:	461a      	mov	r2, r3
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	7c3a      	ldrb	r2, [r7, #16]
 80013be:	4301      	orrs	r1, r0
 80013c0:	3208      	adds	r2, #8
 80013c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40013c00 	.word	0x40013c00

080013dc <GPIO_WriteToOutputPin>:
 *
 * @Note					- none
 *
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80013ec:	78bb      	ldrb	r3, [r7, #2]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d109      	bne.n	8001406 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1<< PinNumber);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1<< PinNumber);
	}
}
 8001404:	e009      	b.n	800141a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1<< PinNumber);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	43d2      	mvns	r2, r2
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	615a      	str	r2, [r3, #20]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <I2C_ExecuteAddressPhaseWrite>:




static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001460:	78fa      	ldrb	r2, [r7, #3]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	611a      	str	r2, [r3, #16]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01f      	beq.n	80014f4 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7f1b      	ldrb	r3, [r3, #28]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d112      	bne.n	80014e2 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d11f      	bne.n	8001504 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fa5d 	bl	800198a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80014e0:	e010      	b.n	8001504 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	60fb      	str	r3, [r7, #12]
}
 80014f2:	e007      	b.n	8001504 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	60fb      	str	r3, [r7, #12]
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d106      	bne.n	800154c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800154a:	e005      	b.n	8001558 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0201 	bic.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d120      	bne.n	80015b8 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <I2C_PeriClockControl+0xa0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d106      	bne.n	800158c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <I2C_PeriClockControl+0xa4>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <I2C_PeriClockControl+0xa4>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}		//TODO
	}

}
 800158a:	e035      	b.n	80015f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <I2C_PeriClockControl+0xa8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d106      	bne.n	80015a2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <I2C_PeriClockControl+0xa4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <I2C_PeriClockControl+0xa4>)
 800159a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015a0:	e02a      	b.n	80015f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <I2C_PeriClockControl+0xac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d126      	bne.n	80015f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015b6:	e01f      	b.n	80015f8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <I2C_PeriClockControl+0xa0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d106      	bne.n	80015ce <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015cc:	e014      	b.n	80015f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <I2C_PeriClockControl+0xa8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d106      	bne.n	80015e4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015e2:	e009      	b.n	80015f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <I2C_PeriClockControl+0xac>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d105      	bne.n	80015f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <I2C_PeriClockControl+0xa4>)
 80015f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40005800 	.word	0x40005800
 8001610:	40005c00 	.word	0x40005c00

08001614 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff9c 	bl	8001564 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7a5b      	ldrb	r3, [r3, #9]
 8001630:	029b      	lsls	r3, r3, #10
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8001646:	f000 f9bd 	bl	80019c4 <RCC_GetPCLK1Value>
 800164a:	4603      	mov	r3, r0
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <I2C_Init+0x158>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9b      	lsrs	r3, r3, #18
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001664:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a1b      	ldrb	r3, [r3, #8]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a36      	ldr	r2, [pc, #216]	; (8001770 <I2C_Init+0x15c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d80f      	bhi.n	80016ba <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800169a:	f000 f993 	bl	80019c4 <RCC_GetPCLK1Value>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e02d      	b.n	8001716 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7a9b      	ldrb	r3, [r3, #10]
 80016c6:	039b      	lsls	r3, r3, #14
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7a9b      	ldrb	r3, [r3, #10]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10b      	bne.n	80016f0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80016d8:	f000 f974 	bl	80019c4 <RCC_GetPCLK1Value>
 80016dc:	4601      	mov	r1, r0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ec:	817b      	strh	r3, [r7, #10]
 80016ee:	e00c      	b.n	800170a <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80016f0:	f000 f968 	bl	80019c4 <RCC_GetPCLK1Value>
 80016f4:	4601      	mov	r1, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	fbb1 f3f3 	udiv	r3, r1, r3
 8001708:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800170a:	897b      	ldrh	r3, [r7, #10]
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <I2C_Init+0x15c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d809      	bhi.n	800173c <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8001728:	f000 f94c 	bl	80019c4 <RCC_GetPCLK1Value>
 800172c:	4603      	mov	r3, r0
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <I2C_Init+0x158>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e00d      	b.n	8001758 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 800173c:	f000 f942 	bl	80019c4 <RCC_GetPCLK1Value>
 8001740:	4603      	mov	r3, r0
 8001742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	0a5b      	lsrs	r3, r3, #9
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <I2C_Init+0x160>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	09db      	lsrs	r3, r3, #7
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001762:	621a      	str	r2, [r3, #32]

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	431bde83 	.word	0x431bde83
 8001770:	000186a0 	.word	0x000186a0
 8001774:	00044b83 	.word	0x00044b83

08001778 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fe37 	bl	8001426 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80017b8:	bf00      	nop
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ffd9 	bl	8001778 <I2C_GetFlagStatus>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f6      	beq.n	80017ba <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe36 	bl	8001446 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80017da:	bf00      	nop
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffc8 	bl	8001778 <I2C_GetFlagStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f6      	beq.n	80017dc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fe55 	bl	800149e <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80017f4:	e014      	b.n	8001820 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80017f6:	bf00      	nop
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ffba 	bl	8001778 <I2C_GetFlagStatus>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f6      	beq.n	80017f8 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3301      	adds	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
		Len--;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3b01      	subs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1e7      	bne.n	80017f6 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8001826:	bf00      	nop
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ffa2 	bl	8001778 <I2C_GetFlagStatus>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f6      	beq.n	8001828 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 800183a:	bf00      	nop
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2104      	movs	r1, #4
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff98 	bl	8001778 <I2C_GetFlagStatus>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f6      	beq.n	800183c <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800184e:	7e3b      	ldrb	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fe57 	bl	800150c <I2C_GenerateStopCondition>

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	4611      	mov	r1, r2
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fdd0 	bl	8001426 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001886:	bf00      	nop
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff72 	bl	8001778 <I2C_GetFlagStatus>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f6      	beq.n	8001888 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fde5 	bl	8001472 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80018a8:	bf00      	nop
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2102      	movs	r1, #2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff61 	bl	8001778 <I2C_GetFlagStatus>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f6      	beq.n	80018aa <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d121      	bne.n	8001906 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f85e 	bl	800198a <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fde5 	bl	800149e <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80018d4:	bf00      	nop
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2140      	movs	r1, #64	; 0x40
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff4b 	bl	8001778 <I2C_GetFlagStatus>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f6      	beq.n	80018d6 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80018e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fe09 	bl	800150c <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d930      	bls.n	800196e <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff fdc6 	bl	800149e <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e027      	b.n	8001968 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001918:	bf00      	nop
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff29 	bl	8001778 <I2C_GetFlagStatus>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f6      	beq.n	800191a <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d10e      	bne.n	8001950 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f826 	bl	800198a <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 800193e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fdde 	bl	800150c <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3b01      	subs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1d4      	bne.n	8001918 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	7a5b      	ldrb	r3, [r3, #9]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f804 	bl	800198a <I2C_ManageAcking>
	}

}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80019a8:	e005      	b.n	80019b6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <RCC_GetPCLK1Value+0x9c>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80019d8:	7a7b      	ldrb	r3, [r7, #9]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <RCC_GetPCLK1Value+0xa0>)
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e00b      	b.n	80019fc <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80019e4:	7a7b      	ldrb	r3, [r7, #9]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d102      	bne.n	80019f0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <RCC_GetPCLK1Value+0xa4>)
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e005      	b.n	80019fc <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80019f0:	7a7b      	ldrb	r3, [r7, #9]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d102      	bne.n	80019fc <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80019f6:	f000 f83d 	bl	8001a74 <RCC_GetPLLOutputClock>
 80019fa:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <RCC_GetPCLK1Value+0x9c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001a0a:	7a3b      	ldrb	r3, [r7, #8]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d802      	bhi.n	8001a16 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	72fb      	strb	r3, [r7, #11]
 8001a14:	e005      	b.n	8001a22 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001a16:	7a3b      	ldrb	r3, [r7, #8]
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <RCC_GetPCLK1Value+0xa8>)
 8001a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a20:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <RCC_GetPCLK1Value+0x9c>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8001a30:	7a3b      	ldrb	r3, [r7, #8]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d802      	bhi.n	8001a3c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	72bb      	strb	r3, [r7, #10]
 8001a3a:	e004      	b.n	8001a46 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <RCC_GetPCLK1Value+0xac>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000010 	.word	0x20000010

08001a74 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

	return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <__errno>:
 8001a84:	4b01      	ldr	r3, [pc, #4]	; (8001a8c <__errno+0x8>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000014 	.word	0x20000014

08001a90 <__libc_init_array>:
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	4d0d      	ldr	r5, [pc, #52]	; (8001ac8 <__libc_init_array+0x38>)
 8001a94:	4c0d      	ldr	r4, [pc, #52]	; (8001acc <__libc_init_array+0x3c>)
 8001a96:	1b64      	subs	r4, r4, r5
 8001a98:	10a4      	asrs	r4, r4, #2
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	42a6      	cmp	r6, r4
 8001a9e:	d109      	bne.n	8001ab4 <__libc_init_array+0x24>
 8001aa0:	4d0b      	ldr	r5, [pc, #44]	; (8001ad0 <__libc_init_array+0x40>)
 8001aa2:	4c0c      	ldr	r4, [pc, #48]	; (8001ad4 <__libc_init_array+0x44>)
 8001aa4:	f000 fce6 	bl	8002474 <_init>
 8001aa8:	1b64      	subs	r4, r4, r5
 8001aaa:	10a4      	asrs	r4, r4, #2
 8001aac:	2600      	movs	r6, #0
 8001aae:	42a6      	cmp	r6, r4
 8001ab0:	d105      	bne.n	8001abe <__libc_init_array+0x2e>
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab8:	4798      	blx	r3
 8001aba:	3601      	adds	r6, #1
 8001abc:	e7ee      	b.n	8001a9c <__libc_init_array+0xc>
 8001abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac2:	4798      	blx	r3
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	e7f2      	b.n	8001aae <__libc_init_array+0x1e>
 8001ac8:	08002578 	.word	0x08002578
 8001acc:	08002578 	.word	0x08002578
 8001ad0:	08002578 	.word	0x08002578
 8001ad4:	0800257c 	.word	0x0800257c

08001ad8 <memset>:
 8001ad8:	4402      	add	r2, r0
 8001ada:	4603      	mov	r3, r0
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <memset+0xa>
 8001ae0:	4770      	bx	lr
 8001ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ae6:	e7f9      	b.n	8001adc <memset+0x4>

08001ae8 <_puts_r>:
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	460e      	mov	r6, r1
 8001aec:	4605      	mov	r5, r0
 8001aee:	b118      	cbz	r0, 8001af8 <_puts_r+0x10>
 8001af0:	6983      	ldr	r3, [r0, #24]
 8001af2:	b90b      	cbnz	r3, 8001af8 <_puts_r+0x10>
 8001af4:	f000 fa48 	bl	8001f88 <__sinit>
 8001af8:	69ab      	ldr	r3, [r5, #24]
 8001afa:	68ac      	ldr	r4, [r5, #8]
 8001afc:	b913      	cbnz	r3, 8001b04 <_puts_r+0x1c>
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 fa42 	bl	8001f88 <__sinit>
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <_puts_r+0xd0>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d120      	bne.n	8001b4c <_puts_r+0x64>
 8001b0a:	686c      	ldr	r4, [r5, #4]
 8001b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b0e:	07db      	lsls	r3, r3, #31
 8001b10:	d405      	bmi.n	8001b1e <_puts_r+0x36>
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	0598      	lsls	r0, r3, #22
 8001b16:	d402      	bmi.n	8001b1e <_puts_r+0x36>
 8001b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b1a:	f000 fad3 	bl	80020c4 <__retarget_lock_acquire_recursive>
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	0719      	lsls	r1, r3, #28
 8001b22:	d51d      	bpl.n	8001b60 <_puts_r+0x78>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	b1db      	cbz	r3, 8001b60 <_puts_r+0x78>
 8001b28:	3e01      	subs	r6, #1
 8001b2a:	68a3      	ldr	r3, [r4, #8]
 8001b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	bb39      	cbnz	r1, 8001b86 <_puts_r+0x9e>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da38      	bge.n	8001bac <_puts_r+0xc4>
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	210a      	movs	r1, #10
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 f848 	bl	8001bd4 <__swbuf_r>
 8001b44:	3001      	adds	r0, #1
 8001b46:	d011      	beq.n	8001b6c <_puts_r+0x84>
 8001b48:	250a      	movs	r5, #10
 8001b4a:	e011      	b.n	8001b70 <_puts_r+0x88>
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <_puts_r+0xd4>)
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	d101      	bne.n	8001b56 <_puts_r+0x6e>
 8001b52:	68ac      	ldr	r4, [r5, #8]
 8001b54:	e7da      	b.n	8001b0c <_puts_r+0x24>
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <_puts_r+0xd8>)
 8001b58:	429c      	cmp	r4, r3
 8001b5a:	bf08      	it	eq
 8001b5c:	68ec      	ldreq	r4, [r5, #12]
 8001b5e:	e7d5      	b.n	8001b0c <_puts_r+0x24>
 8001b60:	4621      	mov	r1, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f888 	bl	8001c78 <__swsetup_r>
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d0dd      	beq.n	8001b28 <_puts_r+0x40>
 8001b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8001b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b72:	07da      	lsls	r2, r3, #31
 8001b74:	d405      	bmi.n	8001b82 <_puts_r+0x9a>
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	059b      	lsls	r3, r3, #22
 8001b7a:	d402      	bmi.n	8001b82 <_puts_r+0x9a>
 8001b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7e:	f000 faa2 	bl	80020c6 <__retarget_lock_release_recursive>
 8001b82:	4628      	mov	r0, r5
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da04      	bge.n	8001b94 <_puts_r+0xac>
 8001b8a:	69a2      	ldr	r2, [r4, #24]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dc06      	bgt.n	8001b9e <_puts_r+0xb6>
 8001b90:	290a      	cmp	r1, #10
 8001b92:	d004      	beq.n	8001b9e <_puts_r+0xb6>
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	6022      	str	r2, [r4, #0]
 8001b9a:	7019      	strb	r1, [r3, #0]
 8001b9c:	e7c5      	b.n	8001b2a <_puts_r+0x42>
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f000 f817 	bl	8001bd4 <__swbuf_r>
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	d1bf      	bne.n	8001b2a <_puts_r+0x42>
 8001baa:	e7df      	b.n	8001b6c <_puts_r+0x84>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	250a      	movs	r5, #10
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	6022      	str	r2, [r4, #0]
 8001bb4:	701d      	strb	r5, [r3, #0]
 8001bb6:	e7db      	b.n	8001b70 <_puts_r+0x88>
 8001bb8:	08002538 	.word	0x08002538
 8001bbc:	08002558 	.word	0x08002558
 8001bc0:	08002518 	.word	0x08002518

08001bc4 <puts>:
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <puts+0xc>)
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	f7ff bf8d 	b.w	8001ae8 <_puts_r>
 8001bce:	bf00      	nop
 8001bd0:	20000014 	.word	0x20000014

08001bd4 <__swbuf_r>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	460e      	mov	r6, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	4605      	mov	r5, r0
 8001bdc:	b118      	cbz	r0, 8001be6 <__swbuf_r+0x12>
 8001bde:	6983      	ldr	r3, [r0, #24]
 8001be0:	b90b      	cbnz	r3, 8001be6 <__swbuf_r+0x12>
 8001be2:	f000 f9d1 	bl	8001f88 <__sinit>
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <__swbuf_r+0x98>)
 8001be8:	429c      	cmp	r4, r3
 8001bea:	d12b      	bne.n	8001c44 <__swbuf_r+0x70>
 8001bec:	686c      	ldr	r4, [r5, #4]
 8001bee:	69a3      	ldr	r3, [r4, #24]
 8001bf0:	60a3      	str	r3, [r4, #8]
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	071a      	lsls	r2, r3, #28
 8001bf6:	d52f      	bpl.n	8001c58 <__swbuf_r+0x84>
 8001bf8:	6923      	ldr	r3, [r4, #16]
 8001bfa:	b36b      	cbz	r3, 8001c58 <__swbuf_r+0x84>
 8001bfc:	6923      	ldr	r3, [r4, #16]
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	1ac0      	subs	r0, r0, r3
 8001c02:	6963      	ldr	r3, [r4, #20]
 8001c04:	b2f6      	uxtb	r6, r6
 8001c06:	4283      	cmp	r3, r0
 8001c08:	4637      	mov	r7, r6
 8001c0a:	dc04      	bgt.n	8001c16 <__swbuf_r+0x42>
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f000 f926 	bl	8001e60 <_fflush_r>
 8001c14:	bb30      	cbnz	r0, 8001c64 <__swbuf_r+0x90>
 8001c16:	68a3      	ldr	r3, [r4, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60a3      	str	r3, [r4, #8]
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	6022      	str	r2, [r4, #0]
 8001c22:	701e      	strb	r6, [r3, #0]
 8001c24:	6963      	ldr	r3, [r4, #20]
 8001c26:	3001      	adds	r0, #1
 8001c28:	4283      	cmp	r3, r0
 8001c2a:	d004      	beq.n	8001c36 <__swbuf_r+0x62>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	07db      	lsls	r3, r3, #31
 8001c30:	d506      	bpl.n	8001c40 <__swbuf_r+0x6c>
 8001c32:	2e0a      	cmp	r6, #10
 8001c34:	d104      	bne.n	8001c40 <__swbuf_r+0x6c>
 8001c36:	4621      	mov	r1, r4
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f000 f911 	bl	8001e60 <_fflush_r>
 8001c3e:	b988      	cbnz	r0, 8001c64 <__swbuf_r+0x90>
 8001c40:	4638      	mov	r0, r7
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <__swbuf_r+0x9c>)
 8001c46:	429c      	cmp	r4, r3
 8001c48:	d101      	bne.n	8001c4e <__swbuf_r+0x7a>
 8001c4a:	68ac      	ldr	r4, [r5, #8]
 8001c4c:	e7cf      	b.n	8001bee <__swbuf_r+0x1a>
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <__swbuf_r+0xa0>)
 8001c50:	429c      	cmp	r4, r3
 8001c52:	bf08      	it	eq
 8001c54:	68ec      	ldreq	r4, [r5, #12]
 8001c56:	e7ca      	b.n	8001bee <__swbuf_r+0x1a>
 8001c58:	4621      	mov	r1, r4
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f000 f80c 	bl	8001c78 <__swsetup_r>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d0cb      	beq.n	8001bfc <__swbuf_r+0x28>
 8001c64:	f04f 37ff 	mov.w	r7, #4294967295
 8001c68:	e7ea      	b.n	8001c40 <__swbuf_r+0x6c>
 8001c6a:	bf00      	nop
 8001c6c:	08002538 	.word	0x08002538
 8001c70:	08002558 	.word	0x08002558
 8001c74:	08002518 	.word	0x08002518

08001c78 <__swsetup_r>:
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <__swsetup_r+0xcc>)
 8001c7a:	b570      	push	{r4, r5, r6, lr}
 8001c7c:	681d      	ldr	r5, [r3, #0]
 8001c7e:	4606      	mov	r6, r0
 8001c80:	460c      	mov	r4, r1
 8001c82:	b125      	cbz	r5, 8001c8e <__swsetup_r+0x16>
 8001c84:	69ab      	ldr	r3, [r5, #24]
 8001c86:	b913      	cbnz	r3, 8001c8e <__swsetup_r+0x16>
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f000 f97d 	bl	8001f88 <__sinit>
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <__swsetup_r+0xd0>)
 8001c90:	429c      	cmp	r4, r3
 8001c92:	d10f      	bne.n	8001cb4 <__swsetup_r+0x3c>
 8001c94:	686c      	ldr	r4, [r5, #4]
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c9c:	0719      	lsls	r1, r3, #28
 8001c9e:	d42c      	bmi.n	8001cfa <__swsetup_r+0x82>
 8001ca0:	06dd      	lsls	r5, r3, #27
 8001ca2:	d411      	bmi.n	8001cc8 <__swsetup_r+0x50>
 8001ca4:	2309      	movs	r3, #9
 8001ca6:	6033      	str	r3, [r6, #0]
 8001ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001cac:	81a3      	strh	r3, [r4, #12]
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	e03e      	b.n	8001d32 <__swsetup_r+0xba>
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <__swsetup_r+0xd4>)
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	d101      	bne.n	8001cbe <__swsetup_r+0x46>
 8001cba:	68ac      	ldr	r4, [r5, #8]
 8001cbc:	e7eb      	b.n	8001c96 <__swsetup_r+0x1e>
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <__swsetup_r+0xd8>)
 8001cc0:	429c      	cmp	r4, r3
 8001cc2:	bf08      	it	eq
 8001cc4:	68ec      	ldreq	r4, [r5, #12]
 8001cc6:	e7e6      	b.n	8001c96 <__swsetup_r+0x1e>
 8001cc8:	0758      	lsls	r0, r3, #29
 8001cca:	d512      	bpl.n	8001cf2 <__swsetup_r+0x7a>
 8001ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cce:	b141      	cbz	r1, 8001ce2 <__swsetup_r+0x6a>
 8001cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d002      	beq.n	8001cde <__swsetup_r+0x66>
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 fa59 	bl	8002190 <_free_r>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	2300      	movs	r3, #0
 8001cec:	6063      	str	r3, [r4, #4]
 8001cee:	6923      	ldr	r3, [r4, #16]
 8001cf0:	6023      	str	r3, [r4, #0]
 8001cf2:	89a3      	ldrh	r3, [r4, #12]
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	81a3      	strh	r3, [r4, #12]
 8001cfa:	6923      	ldr	r3, [r4, #16]
 8001cfc:	b94b      	cbnz	r3, 8001d12 <__swsetup_r+0x9a>
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d08:	d003      	beq.n	8001d12 <__swsetup_r+0x9a>
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f000 f9ff 	bl	8002110 <__smakebuf_r>
 8001d12:	89a0      	ldrh	r0, [r4, #12]
 8001d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d18:	f010 0301 	ands.w	r3, r0, #1
 8001d1c:	d00a      	beq.n	8001d34 <__swsetup_r+0xbc>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60a3      	str	r3, [r4, #8]
 8001d22:	6963      	ldr	r3, [r4, #20]
 8001d24:	425b      	negs	r3, r3
 8001d26:	61a3      	str	r3, [r4, #24]
 8001d28:	6923      	ldr	r3, [r4, #16]
 8001d2a:	b943      	cbnz	r3, 8001d3e <__swsetup_r+0xc6>
 8001d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d30:	d1ba      	bne.n	8001ca8 <__swsetup_r+0x30>
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
 8001d34:	0781      	lsls	r1, r0, #30
 8001d36:	bf58      	it	pl
 8001d38:	6963      	ldrpl	r3, [r4, #20]
 8001d3a:	60a3      	str	r3, [r4, #8]
 8001d3c:	e7f4      	b.n	8001d28 <__swsetup_r+0xb0>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	e7f7      	b.n	8001d32 <__swsetup_r+0xba>
 8001d42:	bf00      	nop
 8001d44:	20000014 	.word	0x20000014
 8001d48:	08002538 	.word	0x08002538
 8001d4c:	08002558 	.word	0x08002558
 8001d50:	08002518 	.word	0x08002518

08001d54 <__sflush_r>:
 8001d54:	898a      	ldrh	r2, [r1, #12]
 8001d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	0710      	lsls	r0, r2, #28
 8001d5e:	460c      	mov	r4, r1
 8001d60:	d458      	bmi.n	8001e14 <__sflush_r+0xc0>
 8001d62:	684b      	ldr	r3, [r1, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	dc05      	bgt.n	8001d74 <__sflush_r+0x20>
 8001d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	dc02      	bgt.n	8001d74 <__sflush_r+0x20>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d76:	2e00      	cmp	r6, #0
 8001d78:	d0f9      	beq.n	8001d6e <__sflush_r+0x1a>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d80:	682f      	ldr	r7, [r5, #0]
 8001d82:	602b      	str	r3, [r5, #0]
 8001d84:	d032      	beq.n	8001dec <__sflush_r+0x98>
 8001d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	075a      	lsls	r2, r3, #29
 8001d8c:	d505      	bpl.n	8001d9a <__sflush_r+0x46>
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	1ac0      	subs	r0, r0, r3
 8001d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d94:	b10b      	cbz	r3, 8001d9a <__sflush_r+0x46>
 8001d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d98:	1ac0      	subs	r0, r0, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001da0:	6a21      	ldr	r1, [r4, #32]
 8001da2:	4628      	mov	r0, r5
 8001da4:	47b0      	blx	r6
 8001da6:	1c43      	adds	r3, r0, #1
 8001da8:	89a3      	ldrh	r3, [r4, #12]
 8001daa:	d106      	bne.n	8001dba <__sflush_r+0x66>
 8001dac:	6829      	ldr	r1, [r5, #0]
 8001dae:	291d      	cmp	r1, #29
 8001db0:	d82c      	bhi.n	8001e0c <__sflush_r+0xb8>
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <__sflush_r+0x108>)
 8001db4:	40ca      	lsrs	r2, r1
 8001db6:	07d6      	lsls	r6, r2, #31
 8001db8:	d528      	bpl.n	8001e0c <__sflush_r+0xb8>
 8001dba:	2200      	movs	r2, #0
 8001dbc:	6062      	str	r2, [r4, #4]
 8001dbe:	04d9      	lsls	r1, r3, #19
 8001dc0:	6922      	ldr	r2, [r4, #16]
 8001dc2:	6022      	str	r2, [r4, #0]
 8001dc4:	d504      	bpl.n	8001dd0 <__sflush_r+0x7c>
 8001dc6:	1c42      	adds	r2, r0, #1
 8001dc8:	d101      	bne.n	8001dce <__sflush_r+0x7a>
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	b903      	cbnz	r3, 8001dd0 <__sflush_r+0x7c>
 8001dce:	6560      	str	r0, [r4, #84]	; 0x54
 8001dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dd2:	602f      	str	r7, [r5, #0]
 8001dd4:	2900      	cmp	r1, #0
 8001dd6:	d0ca      	beq.n	8001d6e <__sflush_r+0x1a>
 8001dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ddc:	4299      	cmp	r1, r3
 8001dde:	d002      	beq.n	8001de6 <__sflush_r+0x92>
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 f9d5 	bl	8002190 <_free_r>
 8001de6:	2000      	movs	r0, #0
 8001de8:	6360      	str	r0, [r4, #52]	; 0x34
 8001dea:	e7c1      	b.n	8001d70 <__sflush_r+0x1c>
 8001dec:	6a21      	ldr	r1, [r4, #32]
 8001dee:	2301      	movs	r3, #1
 8001df0:	4628      	mov	r0, r5
 8001df2:	47b0      	blx	r6
 8001df4:	1c41      	adds	r1, r0, #1
 8001df6:	d1c7      	bne.n	8001d88 <__sflush_r+0x34>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0c4      	beq.n	8001d88 <__sflush_r+0x34>
 8001dfe:	2b1d      	cmp	r3, #29
 8001e00:	d001      	beq.n	8001e06 <__sflush_r+0xb2>
 8001e02:	2b16      	cmp	r3, #22
 8001e04:	d101      	bne.n	8001e0a <__sflush_r+0xb6>
 8001e06:	602f      	str	r7, [r5, #0]
 8001e08:	e7b1      	b.n	8001d6e <__sflush_r+0x1a>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	e7ad      	b.n	8001d70 <__sflush_r+0x1c>
 8001e14:	690f      	ldr	r7, [r1, #16]
 8001e16:	2f00      	cmp	r7, #0
 8001e18:	d0a9      	beq.n	8001d6e <__sflush_r+0x1a>
 8001e1a:	0793      	lsls	r3, r2, #30
 8001e1c:	680e      	ldr	r6, [r1, #0]
 8001e1e:	bf08      	it	eq
 8001e20:	694b      	ldreq	r3, [r1, #20]
 8001e22:	600f      	str	r7, [r1, #0]
 8001e24:	bf18      	it	ne
 8001e26:	2300      	movne	r3, #0
 8001e28:	eba6 0807 	sub.w	r8, r6, r7
 8001e2c:	608b      	str	r3, [r1, #8]
 8001e2e:	f1b8 0f00 	cmp.w	r8, #0
 8001e32:	dd9c      	ble.n	8001d6e <__sflush_r+0x1a>
 8001e34:	6a21      	ldr	r1, [r4, #32]
 8001e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e38:	4643      	mov	r3, r8
 8001e3a:	463a      	mov	r2, r7
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	47b0      	blx	r6
 8001e40:	2800      	cmp	r0, #0
 8001e42:	dc06      	bgt.n	8001e52 <__sflush_r+0xfe>
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4a:	81a3      	strh	r3, [r4, #12]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	e78e      	b.n	8001d70 <__sflush_r+0x1c>
 8001e52:	4407      	add	r7, r0
 8001e54:	eba8 0800 	sub.w	r8, r8, r0
 8001e58:	e7e9      	b.n	8001e2e <__sflush_r+0xda>
 8001e5a:	bf00      	nop
 8001e5c:	20400001 	.word	0x20400001

08001e60 <_fflush_r>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	690b      	ldr	r3, [r1, #16]
 8001e64:	4605      	mov	r5, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	b913      	cbnz	r3, 8001e70 <_fflush_r+0x10>
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	b118      	cbz	r0, 8001e7a <_fflush_r+0x1a>
 8001e72:	6983      	ldr	r3, [r0, #24]
 8001e74:	b90b      	cbnz	r3, 8001e7a <_fflush_r+0x1a>
 8001e76:	f000 f887 	bl	8001f88 <__sinit>
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <_fflush_r+0x6c>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	d11b      	bne.n	8001eb8 <_fflush_r+0x58>
 8001e80:	686c      	ldr	r4, [r5, #4]
 8001e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ef      	beq.n	8001e6a <_fflush_r+0xa>
 8001e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e8c:	07d0      	lsls	r0, r2, #31
 8001e8e:	d404      	bmi.n	8001e9a <_fflush_r+0x3a>
 8001e90:	0599      	lsls	r1, r3, #22
 8001e92:	d402      	bmi.n	8001e9a <_fflush_r+0x3a>
 8001e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e96:	f000 f915 	bl	80020c4 <__retarget_lock_acquire_recursive>
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f7ff ff59 	bl	8001d54 <__sflush_r>
 8001ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ea4:	07da      	lsls	r2, r3, #31
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	d4e0      	bmi.n	8001e6c <_fflush_r+0xc>
 8001eaa:	89a3      	ldrh	r3, [r4, #12]
 8001eac:	059b      	lsls	r3, r3, #22
 8001eae:	d4dd      	bmi.n	8001e6c <_fflush_r+0xc>
 8001eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eb2:	f000 f908 	bl	80020c6 <__retarget_lock_release_recursive>
 8001eb6:	e7d9      	b.n	8001e6c <_fflush_r+0xc>
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <_fflush_r+0x70>)
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	d101      	bne.n	8001ec2 <_fflush_r+0x62>
 8001ebe:	68ac      	ldr	r4, [r5, #8]
 8001ec0:	e7df      	b.n	8001e82 <_fflush_r+0x22>
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <_fflush_r+0x74>)
 8001ec4:	429c      	cmp	r4, r3
 8001ec6:	bf08      	it	eq
 8001ec8:	68ec      	ldreq	r4, [r5, #12]
 8001eca:	e7da      	b.n	8001e82 <_fflush_r+0x22>
 8001ecc:	08002538 	.word	0x08002538
 8001ed0:	08002558 	.word	0x08002558
 8001ed4:	08002518 	.word	0x08002518

08001ed8 <std>:
 8001ed8:	2300      	movs	r3, #0
 8001eda:	b510      	push	{r4, lr}
 8001edc:	4604      	mov	r4, r0
 8001ede:	e9c0 3300 	strd	r3, r3, [r0]
 8001ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ee6:	6083      	str	r3, [r0, #8]
 8001ee8:	8181      	strh	r1, [r0, #12]
 8001eea:	6643      	str	r3, [r0, #100]	; 0x64
 8001eec:	81c2      	strh	r2, [r0, #14]
 8001eee:	6183      	str	r3, [r0, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	305c      	adds	r0, #92	; 0x5c
 8001ef6:	f7ff fdef 	bl	8001ad8 <memset>
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <std+0x38>)
 8001efc:	6263      	str	r3, [r4, #36]	; 0x24
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <std+0x3c>)
 8001f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <std+0x40>)
 8001f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <std+0x44>)
 8001f08:	6224      	str	r4, [r4, #32]
 8001f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	bf00      	nop
 8001f10:	08002305 	.word	0x08002305
 8001f14:	08002327 	.word	0x08002327
 8001f18:	0800235f 	.word	0x0800235f
 8001f1c:	08002383 	.word	0x08002383

08001f20 <_cleanup_r>:
 8001f20:	4901      	ldr	r1, [pc, #4]	; (8001f28 <_cleanup_r+0x8>)
 8001f22:	f000 b8af 	b.w	8002084 <_fwalk_reent>
 8001f26:	bf00      	nop
 8001f28:	08001e61 	.word	0x08001e61

08001f2c <__sfmoreglue>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	1e4a      	subs	r2, r1, #1
 8001f30:	2568      	movs	r5, #104	; 0x68
 8001f32:	4355      	muls	r5, r2
 8001f34:	460e      	mov	r6, r1
 8001f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f3a:	f000 f979 	bl	8002230 <_malloc_r>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	b140      	cbz	r0, 8001f54 <__sfmoreglue+0x28>
 8001f42:	2100      	movs	r1, #0
 8001f44:	e9c0 1600 	strd	r1, r6, [r0]
 8001f48:	300c      	adds	r0, #12
 8001f4a:	60a0      	str	r0, [r4, #8]
 8001f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f50:	f7ff fdc2 	bl	8001ad8 <memset>
 8001f54:	4620      	mov	r0, r4
 8001f56:	bd70      	pop	{r4, r5, r6, pc}

08001f58 <__sfp_lock_acquire>:
 8001f58:	4801      	ldr	r0, [pc, #4]	; (8001f60 <__sfp_lock_acquire+0x8>)
 8001f5a:	f000 b8b3 	b.w	80020c4 <__retarget_lock_acquire_recursive>
 8001f5e:	bf00      	nop
 8001f60:	200000e8 	.word	0x200000e8

08001f64 <__sfp_lock_release>:
 8001f64:	4801      	ldr	r0, [pc, #4]	; (8001f6c <__sfp_lock_release+0x8>)
 8001f66:	f000 b8ae 	b.w	80020c6 <__retarget_lock_release_recursive>
 8001f6a:	bf00      	nop
 8001f6c:	200000e8 	.word	0x200000e8

08001f70 <__sinit_lock_acquire>:
 8001f70:	4801      	ldr	r0, [pc, #4]	; (8001f78 <__sinit_lock_acquire+0x8>)
 8001f72:	f000 b8a7 	b.w	80020c4 <__retarget_lock_acquire_recursive>
 8001f76:	bf00      	nop
 8001f78:	200000e3 	.word	0x200000e3

08001f7c <__sinit_lock_release>:
 8001f7c:	4801      	ldr	r0, [pc, #4]	; (8001f84 <__sinit_lock_release+0x8>)
 8001f7e:	f000 b8a2 	b.w	80020c6 <__retarget_lock_release_recursive>
 8001f82:	bf00      	nop
 8001f84:	200000e3 	.word	0x200000e3

08001f88 <__sinit>:
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	f7ff fff0 	bl	8001f70 <__sinit_lock_acquire>
 8001f90:	69a3      	ldr	r3, [r4, #24]
 8001f92:	b11b      	cbz	r3, 8001f9c <__sinit+0x14>
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f98:	f7ff bff0 	b.w	8001f7c <__sinit_lock_release>
 8001f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <__sinit+0x68>)
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <__sinit+0x6c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001faa:	42a3      	cmp	r3, r4
 8001fac:	bf04      	itt	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	61a3      	streq	r3, [r4, #24]
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f000 f820 	bl	8001ff8 <__sfp>
 8001fb8:	6060      	str	r0, [r4, #4]
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 f81c 	bl	8001ff8 <__sfp>
 8001fc0:	60a0      	str	r0, [r4, #8]
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f818 	bl	8001ff8 <__sfp>
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60e0      	str	r0, [r4, #12]
 8001fcc:	2104      	movs	r1, #4
 8001fce:	6860      	ldr	r0, [r4, #4]
 8001fd0:	f7ff ff82 	bl	8001ed8 <std>
 8001fd4:	68a0      	ldr	r0, [r4, #8]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2109      	movs	r1, #9
 8001fda:	f7ff ff7d 	bl	8001ed8 <std>
 8001fde:	68e0      	ldr	r0, [r4, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	2112      	movs	r1, #18
 8001fe4:	f7ff ff78 	bl	8001ed8 <std>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61a3      	str	r3, [r4, #24]
 8001fec:	e7d2      	b.n	8001f94 <__sinit+0xc>
 8001fee:	bf00      	nop
 8001ff0:	08002514 	.word	0x08002514
 8001ff4:	08001f21 	.word	0x08001f21

08001ff8 <__sfp>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	4607      	mov	r7, r0
 8001ffc:	f7ff ffac 	bl	8001f58 <__sfp_lock_acquire>
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <__sfp+0x84>)
 8002002:	681e      	ldr	r6, [r3, #0]
 8002004:	69b3      	ldr	r3, [r6, #24]
 8002006:	b913      	cbnz	r3, 800200e <__sfp+0x16>
 8002008:	4630      	mov	r0, r6
 800200a:	f7ff ffbd 	bl	8001f88 <__sinit>
 800200e:	3648      	adds	r6, #72	; 0x48
 8002010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002014:	3b01      	subs	r3, #1
 8002016:	d503      	bpl.n	8002020 <__sfp+0x28>
 8002018:	6833      	ldr	r3, [r6, #0]
 800201a:	b30b      	cbz	r3, 8002060 <__sfp+0x68>
 800201c:	6836      	ldr	r6, [r6, #0]
 800201e:	e7f7      	b.n	8002010 <__sfp+0x18>
 8002020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002024:	b9d5      	cbnz	r5, 800205c <__sfp+0x64>
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <__sfp+0x88>)
 8002028:	60e3      	str	r3, [r4, #12]
 800202a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800202e:	6665      	str	r5, [r4, #100]	; 0x64
 8002030:	f000 f847 	bl	80020c2 <__retarget_lock_init_recursive>
 8002034:	f7ff ff96 	bl	8001f64 <__sfp_lock_release>
 8002038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800203c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002040:	6025      	str	r5, [r4, #0]
 8002042:	61a5      	str	r5, [r4, #24]
 8002044:	2208      	movs	r2, #8
 8002046:	4629      	mov	r1, r5
 8002048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800204c:	f7ff fd44 	bl	8001ad8 <memset>
 8002050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002058:	4620      	mov	r0, r4
 800205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205c:	3468      	adds	r4, #104	; 0x68
 800205e:	e7d9      	b.n	8002014 <__sfp+0x1c>
 8002060:	2104      	movs	r1, #4
 8002062:	4638      	mov	r0, r7
 8002064:	f7ff ff62 	bl	8001f2c <__sfmoreglue>
 8002068:	4604      	mov	r4, r0
 800206a:	6030      	str	r0, [r6, #0]
 800206c:	2800      	cmp	r0, #0
 800206e:	d1d5      	bne.n	800201c <__sfp+0x24>
 8002070:	f7ff ff78 	bl	8001f64 <__sfp_lock_release>
 8002074:	230c      	movs	r3, #12
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	e7ee      	b.n	8002058 <__sfp+0x60>
 800207a:	bf00      	nop
 800207c:	08002514 	.word	0x08002514
 8002080:	ffff0001 	.word	0xffff0001

08002084 <_fwalk_reent>:
 8002084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002088:	4606      	mov	r6, r0
 800208a:	4688      	mov	r8, r1
 800208c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002090:	2700      	movs	r7, #0
 8002092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002096:	f1b9 0901 	subs.w	r9, r9, #1
 800209a:	d505      	bpl.n	80020a8 <_fwalk_reent+0x24>
 800209c:	6824      	ldr	r4, [r4, #0]
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d1f7      	bne.n	8002092 <_fwalk_reent+0xe>
 80020a2:	4638      	mov	r0, r7
 80020a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020a8:	89ab      	ldrh	r3, [r5, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d907      	bls.n	80020be <_fwalk_reent+0x3a>
 80020ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020b2:	3301      	adds	r3, #1
 80020b4:	d003      	beq.n	80020be <_fwalk_reent+0x3a>
 80020b6:	4629      	mov	r1, r5
 80020b8:	4630      	mov	r0, r6
 80020ba:	47c0      	blx	r8
 80020bc:	4307      	orrs	r7, r0
 80020be:	3568      	adds	r5, #104	; 0x68
 80020c0:	e7e9      	b.n	8002096 <_fwalk_reent+0x12>

080020c2 <__retarget_lock_init_recursive>:
 80020c2:	4770      	bx	lr

080020c4 <__retarget_lock_acquire_recursive>:
 80020c4:	4770      	bx	lr

080020c6 <__retarget_lock_release_recursive>:
 80020c6:	4770      	bx	lr

080020c8 <__swhatbuf_r>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	460e      	mov	r6, r1
 80020cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d0:	2900      	cmp	r1, #0
 80020d2:	b096      	sub	sp, #88	; 0x58
 80020d4:	4614      	mov	r4, r2
 80020d6:	461d      	mov	r5, r3
 80020d8:	da07      	bge.n	80020ea <__swhatbuf_r+0x22>
 80020da:	2300      	movs	r3, #0
 80020dc:	602b      	str	r3, [r5, #0]
 80020de:	89b3      	ldrh	r3, [r6, #12]
 80020e0:	061a      	lsls	r2, r3, #24
 80020e2:	d410      	bmi.n	8002106 <__swhatbuf_r+0x3e>
 80020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e8:	e00e      	b.n	8002108 <__swhatbuf_r+0x40>
 80020ea:	466a      	mov	r2, sp
 80020ec:	f000 f970 	bl	80023d0 <_fstat_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	dbf2      	blt.n	80020da <__swhatbuf_r+0x12>
 80020f4:	9a01      	ldr	r2, [sp, #4]
 80020f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020fe:	425a      	negs	r2, r3
 8002100:	415a      	adcs	r2, r3
 8002102:	602a      	str	r2, [r5, #0]
 8002104:	e7ee      	b.n	80020e4 <__swhatbuf_r+0x1c>
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	2000      	movs	r0, #0
 800210a:	6023      	str	r3, [r4, #0]
 800210c:	b016      	add	sp, #88	; 0x58
 800210e:	bd70      	pop	{r4, r5, r6, pc}

08002110 <__smakebuf_r>:
 8002110:	898b      	ldrh	r3, [r1, #12]
 8002112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002114:	079d      	lsls	r5, r3, #30
 8002116:	4606      	mov	r6, r0
 8002118:	460c      	mov	r4, r1
 800211a:	d507      	bpl.n	800212c <__smakebuf_r+0x1c>
 800211c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	6123      	str	r3, [r4, #16]
 8002124:	2301      	movs	r3, #1
 8002126:	6163      	str	r3, [r4, #20]
 8002128:	b002      	add	sp, #8
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	ab01      	add	r3, sp, #4
 800212e:	466a      	mov	r2, sp
 8002130:	f7ff ffca 	bl	80020c8 <__swhatbuf_r>
 8002134:	9900      	ldr	r1, [sp, #0]
 8002136:	4605      	mov	r5, r0
 8002138:	4630      	mov	r0, r6
 800213a:	f000 f879 	bl	8002230 <_malloc_r>
 800213e:	b948      	cbnz	r0, 8002154 <__smakebuf_r+0x44>
 8002140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d4ef      	bmi.n	8002128 <__smakebuf_r+0x18>
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	e7e3      	b.n	800211c <__smakebuf_r+0xc>
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <__smakebuf_r+0x7c>)
 8002156:	62b3      	str	r3, [r6, #40]	; 0x28
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	81a3      	strh	r3, [r4, #12]
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	6163      	str	r3, [r4, #20]
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	6120      	str	r0, [r4, #16]
 800216a:	b15b      	cbz	r3, 8002184 <__smakebuf_r+0x74>
 800216c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002170:	4630      	mov	r0, r6
 8002172:	f000 f93f 	bl	80023f4 <_isatty_r>
 8002176:	b128      	cbz	r0, 8002184 <__smakebuf_r+0x74>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	81a3      	strh	r3, [r4, #12]
 8002184:	89a0      	ldrh	r0, [r4, #12]
 8002186:	4305      	orrs	r5, r0
 8002188:	81a5      	strh	r5, [r4, #12]
 800218a:	e7cd      	b.n	8002128 <__smakebuf_r+0x18>
 800218c:	08001f21 	.word	0x08001f21

08002190 <_free_r>:
 8002190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002192:	2900      	cmp	r1, #0
 8002194:	d048      	beq.n	8002228 <_free_r+0x98>
 8002196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800219a:	9001      	str	r0, [sp, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f1a1 0404 	sub.w	r4, r1, #4
 80021a2:	bfb8      	it	lt
 80021a4:	18e4      	addlt	r4, r4, r3
 80021a6:	f000 f947 	bl	8002438 <__malloc_lock>
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <_free_r+0x9c>)
 80021ac:	9801      	ldr	r0, [sp, #4]
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	4615      	mov	r5, r2
 80021b2:	b933      	cbnz	r3, 80021c2 <_free_r+0x32>
 80021b4:	6063      	str	r3, [r4, #4]
 80021b6:	6014      	str	r4, [r2, #0]
 80021b8:	b003      	add	sp, #12
 80021ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021be:	f000 b941 	b.w	8002444 <__malloc_unlock>
 80021c2:	42a3      	cmp	r3, r4
 80021c4:	d90b      	bls.n	80021de <_free_r+0x4e>
 80021c6:	6821      	ldr	r1, [r4, #0]
 80021c8:	1862      	adds	r2, r4, r1
 80021ca:	4293      	cmp	r3, r2
 80021cc:	bf04      	itt	eq
 80021ce:	681a      	ldreq	r2, [r3, #0]
 80021d0:	685b      	ldreq	r3, [r3, #4]
 80021d2:	6063      	str	r3, [r4, #4]
 80021d4:	bf04      	itt	eq
 80021d6:	1852      	addeq	r2, r2, r1
 80021d8:	6022      	streq	r2, [r4, #0]
 80021da:	602c      	str	r4, [r5, #0]
 80021dc:	e7ec      	b.n	80021b8 <_free_r+0x28>
 80021de:	461a      	mov	r2, r3
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	b10b      	cbz	r3, 80021e8 <_free_r+0x58>
 80021e4:	42a3      	cmp	r3, r4
 80021e6:	d9fa      	bls.n	80021de <_free_r+0x4e>
 80021e8:	6811      	ldr	r1, [r2, #0]
 80021ea:	1855      	adds	r5, r2, r1
 80021ec:	42a5      	cmp	r5, r4
 80021ee:	d10b      	bne.n	8002208 <_free_r+0x78>
 80021f0:	6824      	ldr	r4, [r4, #0]
 80021f2:	4421      	add	r1, r4
 80021f4:	1854      	adds	r4, r2, r1
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	6011      	str	r1, [r2, #0]
 80021fa:	d1dd      	bne.n	80021b8 <_free_r+0x28>
 80021fc:	681c      	ldr	r4, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	6053      	str	r3, [r2, #4]
 8002202:	4421      	add	r1, r4
 8002204:	6011      	str	r1, [r2, #0]
 8002206:	e7d7      	b.n	80021b8 <_free_r+0x28>
 8002208:	d902      	bls.n	8002210 <_free_r+0x80>
 800220a:	230c      	movs	r3, #12
 800220c:	6003      	str	r3, [r0, #0]
 800220e:	e7d3      	b.n	80021b8 <_free_r+0x28>
 8002210:	6825      	ldr	r5, [r4, #0]
 8002212:	1961      	adds	r1, r4, r5
 8002214:	428b      	cmp	r3, r1
 8002216:	bf04      	itt	eq
 8002218:	6819      	ldreq	r1, [r3, #0]
 800221a:	685b      	ldreq	r3, [r3, #4]
 800221c:	6063      	str	r3, [r4, #4]
 800221e:	bf04      	itt	eq
 8002220:	1949      	addeq	r1, r1, r5
 8002222:	6021      	streq	r1, [r4, #0]
 8002224:	6054      	str	r4, [r2, #4]
 8002226:	e7c7      	b.n	80021b8 <_free_r+0x28>
 8002228:	b003      	add	sp, #12
 800222a:	bd30      	pop	{r4, r5, pc}
 800222c:	200000b0 	.word	0x200000b0

08002230 <_malloc_r>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	1ccd      	adds	r5, r1, #3
 8002234:	f025 0503 	bic.w	r5, r5, #3
 8002238:	3508      	adds	r5, #8
 800223a:	2d0c      	cmp	r5, #12
 800223c:	bf38      	it	cc
 800223e:	250c      	movcc	r5, #12
 8002240:	2d00      	cmp	r5, #0
 8002242:	4606      	mov	r6, r0
 8002244:	db01      	blt.n	800224a <_malloc_r+0x1a>
 8002246:	42a9      	cmp	r1, r5
 8002248:	d903      	bls.n	8002252 <_malloc_r+0x22>
 800224a:	230c      	movs	r3, #12
 800224c:	6033      	str	r3, [r6, #0]
 800224e:	2000      	movs	r0, #0
 8002250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002252:	f000 f8f1 	bl	8002438 <__malloc_lock>
 8002256:	4921      	ldr	r1, [pc, #132]	; (80022dc <_malloc_r+0xac>)
 8002258:	680a      	ldr	r2, [r1, #0]
 800225a:	4614      	mov	r4, r2
 800225c:	b99c      	cbnz	r4, 8002286 <_malloc_r+0x56>
 800225e:	4f20      	ldr	r7, [pc, #128]	; (80022e0 <_malloc_r+0xb0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b923      	cbnz	r3, 800226e <_malloc_r+0x3e>
 8002264:	4621      	mov	r1, r4
 8002266:	4630      	mov	r0, r6
 8002268:	f000 f83c 	bl	80022e4 <_sbrk_r>
 800226c:	6038      	str	r0, [r7, #0]
 800226e:	4629      	mov	r1, r5
 8002270:	4630      	mov	r0, r6
 8002272:	f000 f837 	bl	80022e4 <_sbrk_r>
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d123      	bne.n	80022c2 <_malloc_r+0x92>
 800227a:	230c      	movs	r3, #12
 800227c:	6033      	str	r3, [r6, #0]
 800227e:	4630      	mov	r0, r6
 8002280:	f000 f8e0 	bl	8002444 <__malloc_unlock>
 8002284:	e7e3      	b.n	800224e <_malloc_r+0x1e>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	1b5b      	subs	r3, r3, r5
 800228a:	d417      	bmi.n	80022bc <_malloc_r+0x8c>
 800228c:	2b0b      	cmp	r3, #11
 800228e:	d903      	bls.n	8002298 <_malloc_r+0x68>
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	441c      	add	r4, r3
 8002294:	6025      	str	r5, [r4, #0]
 8002296:	e004      	b.n	80022a2 <_malloc_r+0x72>
 8002298:	6863      	ldr	r3, [r4, #4]
 800229a:	42a2      	cmp	r2, r4
 800229c:	bf0c      	ite	eq
 800229e:	600b      	streq	r3, [r1, #0]
 80022a0:	6053      	strne	r3, [r2, #4]
 80022a2:	4630      	mov	r0, r6
 80022a4:	f000 f8ce 	bl	8002444 <__malloc_unlock>
 80022a8:	f104 000b 	add.w	r0, r4, #11
 80022ac:	1d23      	adds	r3, r4, #4
 80022ae:	f020 0007 	bic.w	r0, r0, #7
 80022b2:	1ac2      	subs	r2, r0, r3
 80022b4:	d0cc      	beq.n	8002250 <_malloc_r+0x20>
 80022b6:	1a1b      	subs	r3, r3, r0
 80022b8:	50a3      	str	r3, [r4, r2]
 80022ba:	e7c9      	b.n	8002250 <_malloc_r+0x20>
 80022bc:	4622      	mov	r2, r4
 80022be:	6864      	ldr	r4, [r4, #4]
 80022c0:	e7cc      	b.n	800225c <_malloc_r+0x2c>
 80022c2:	1cc4      	adds	r4, r0, #3
 80022c4:	f024 0403 	bic.w	r4, r4, #3
 80022c8:	42a0      	cmp	r0, r4
 80022ca:	d0e3      	beq.n	8002294 <_malloc_r+0x64>
 80022cc:	1a21      	subs	r1, r4, r0
 80022ce:	4630      	mov	r0, r6
 80022d0:	f000 f808 	bl	80022e4 <_sbrk_r>
 80022d4:	3001      	adds	r0, #1
 80022d6:	d1dd      	bne.n	8002294 <_malloc_r+0x64>
 80022d8:	e7cf      	b.n	800227a <_malloc_r+0x4a>
 80022da:	bf00      	nop
 80022dc:	200000b0 	.word	0x200000b0
 80022e0:	200000b4 	.word	0x200000b4

080022e4 <_sbrk_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4d06      	ldr	r5, [pc, #24]	; (8002300 <_sbrk_r+0x1c>)
 80022e8:	2300      	movs	r3, #0
 80022ea:	4604      	mov	r4, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	602b      	str	r3, [r5, #0]
 80022f0:	f7fe fd5a 	bl	8000da8 <_sbrk>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	d102      	bne.n	80022fe <_sbrk_r+0x1a>
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	b103      	cbz	r3, 80022fe <_sbrk_r+0x1a>
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	200000ec 	.word	0x200000ec

08002304 <__sread>:
 8002304:	b510      	push	{r4, lr}
 8002306:	460c      	mov	r4, r1
 8002308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230c:	f000 f8a0 	bl	8002450 <_read_r>
 8002310:	2800      	cmp	r0, #0
 8002312:	bfab      	itete	ge
 8002314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002316:	89a3      	ldrhlt	r3, [r4, #12]
 8002318:	181b      	addge	r3, r3, r0
 800231a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800231e:	bfac      	ite	ge
 8002320:	6563      	strge	r3, [r4, #84]	; 0x54
 8002322:	81a3      	strhlt	r3, [r4, #12]
 8002324:	bd10      	pop	{r4, pc}

08002326 <__swrite>:
 8002326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800232a:	461f      	mov	r7, r3
 800232c:	898b      	ldrh	r3, [r1, #12]
 800232e:	05db      	lsls	r3, r3, #23
 8002330:	4605      	mov	r5, r0
 8002332:	460c      	mov	r4, r1
 8002334:	4616      	mov	r6, r2
 8002336:	d505      	bpl.n	8002344 <__swrite+0x1e>
 8002338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233c:	2302      	movs	r3, #2
 800233e:	2200      	movs	r2, #0
 8002340:	f000 f868 	bl	8002414 <_lseek_r>
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800234a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800234e:	81a3      	strh	r3, [r4, #12]
 8002350:	4632      	mov	r2, r6
 8002352:	463b      	mov	r3, r7
 8002354:	4628      	mov	r0, r5
 8002356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800235a:	f000 b817 	b.w	800238c <_write_r>

0800235e <__sseek>:
 800235e:	b510      	push	{r4, lr}
 8002360:	460c      	mov	r4, r1
 8002362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002366:	f000 f855 	bl	8002414 <_lseek_r>
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	bf15      	itete	ne
 8002370:	6560      	strne	r0, [r4, #84]	; 0x54
 8002372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800237a:	81a3      	strheq	r3, [r4, #12]
 800237c:	bf18      	it	ne
 800237e:	81a3      	strhne	r3, [r4, #12]
 8002380:	bd10      	pop	{r4, pc}

08002382 <__sclose>:
 8002382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002386:	f000 b813 	b.w	80023b0 <_close_r>
	...

0800238c <_write_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4d07      	ldr	r5, [pc, #28]	; (80023ac <_write_r+0x20>)
 8002390:	4604      	mov	r4, r0
 8002392:	4608      	mov	r0, r1
 8002394:	4611      	mov	r1, r2
 8002396:	2200      	movs	r2, #0
 8002398:	602a      	str	r2, [r5, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	f7fe fcb3 	bl	8000d06 <_write>
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	d102      	bne.n	80023aa <_write_r+0x1e>
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	b103      	cbz	r3, 80023aa <_write_r+0x1e>
 80023a8:	6023      	str	r3, [r4, #0]
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	200000ec 	.word	0x200000ec

080023b0 <_close_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4d06      	ldr	r5, [pc, #24]	; (80023cc <_close_r+0x1c>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	f7fe fcbf 	bl	8000d3e <_close>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_close_r+0x1a>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_close_r+0x1a>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200000ec 	.word	0x200000ec

080023d0 <_fstat_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4d07      	ldr	r5, [pc, #28]	; (80023f0 <_fstat_r+0x20>)
 80023d4:	2300      	movs	r3, #0
 80023d6:	4604      	mov	r4, r0
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	602b      	str	r3, [r5, #0]
 80023de:	f7fe fcba 	bl	8000d56 <_fstat>
 80023e2:	1c43      	adds	r3, r0, #1
 80023e4:	d102      	bne.n	80023ec <_fstat_r+0x1c>
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	b103      	cbz	r3, 80023ec <_fstat_r+0x1c>
 80023ea:	6023      	str	r3, [r4, #0]
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
 80023ee:	bf00      	nop
 80023f0:	200000ec 	.word	0x200000ec

080023f4 <_isatty_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4d06      	ldr	r5, [pc, #24]	; (8002410 <_isatty_r+0x1c>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	602b      	str	r3, [r5, #0]
 8002400:	f7fe fcb9 	bl	8000d76 <_isatty>
 8002404:	1c43      	adds	r3, r0, #1
 8002406:	d102      	bne.n	800240e <_isatty_r+0x1a>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	b103      	cbz	r3, 800240e <_isatty_r+0x1a>
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	200000ec 	.word	0x200000ec

08002414 <_lseek_r>:
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	4d07      	ldr	r5, [pc, #28]	; (8002434 <_lseek_r+0x20>)
 8002418:	4604      	mov	r4, r0
 800241a:	4608      	mov	r0, r1
 800241c:	4611      	mov	r1, r2
 800241e:	2200      	movs	r2, #0
 8002420:	602a      	str	r2, [r5, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f7fe fcb2 	bl	8000d8c <_lseek>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d102      	bne.n	8002432 <_lseek_r+0x1e>
 800242c:	682b      	ldr	r3, [r5, #0]
 800242e:	b103      	cbz	r3, 8002432 <_lseek_r+0x1e>
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	200000ec 	.word	0x200000ec

08002438 <__malloc_lock>:
 8002438:	4801      	ldr	r0, [pc, #4]	; (8002440 <__malloc_lock+0x8>)
 800243a:	f7ff be43 	b.w	80020c4 <__retarget_lock_acquire_recursive>
 800243e:	bf00      	nop
 8002440:	200000e4 	.word	0x200000e4

08002444 <__malloc_unlock>:
 8002444:	4801      	ldr	r0, [pc, #4]	; (800244c <__malloc_unlock+0x8>)
 8002446:	f7ff be3e 	b.w	80020c6 <__retarget_lock_release_recursive>
 800244a:	bf00      	nop
 800244c:	200000e4 	.word	0x200000e4

08002450 <_read_r>:
 8002450:	b538      	push	{r3, r4, r5, lr}
 8002452:	4d07      	ldr	r5, [pc, #28]	; (8002470 <_read_r+0x20>)
 8002454:	4604      	mov	r4, r0
 8002456:	4608      	mov	r0, r1
 8002458:	4611      	mov	r1, r2
 800245a:	2200      	movs	r2, #0
 800245c:	602a      	str	r2, [r5, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	f7fe fc34 	bl	8000ccc <_read>
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	d102      	bne.n	800246e <_read_r+0x1e>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	b103      	cbz	r3, 800246e <_read_r+0x1e>
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	bd38      	pop	{r3, r4, r5, pc}
 8002470:	200000ec 	.word	0x200000ec

08002474 <_init>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr

08002480 <_fini>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	bf00      	nop
 8002484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002486:	bc08      	pop	{r3}
 8002488:	469e      	mov	lr, r3
 800248a:	4770      	bx	lr
